"0","require(magrittr)"
"0","require(dplyr)"
"0",""
"0","game <- function(N){"
"0","  if(N<3) stop(""Must have at least 3 doors"")"
"0","  prize <- sample(c(rep(""goat"",N-1),""car""), N)"
"0","  guess <- sample(1:N,1)"
"0","  game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>% "
"0","    mutate(first_guess = case_when("
"0","      door == guess ~ 1"
"0","      , TRUE ~ 0"
"0","    )) %>% "
"0","    mutate(potential_reveal = case_when("
"0","        first_guess == 1 ~ 0"
"0","      , prize == ""car"" ~ 0"
"0","      , TRUE ~ 1"
"0","    )) %>% "
"0","    mutate(reveal = 1*(rank(potential_reveal, ties.method = ""random"") == 3)) %>% "
"0","    mutate(potential_switch = case_when("
"0","      first_guess == 1 ~ 0"
"0","      , reveal == 1 ~ 0"
"0","      , TRUE ~ 1"
"0","    )) %>% "
"0","    mutate(switch = 1*(rank(potential_switch, ties.method = ""random"") == 3))"
"0","  c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])"
"0","}"
"0",""
"0","# simulation setting"
"0","a = NA"
"0","strategy1 = rep(NA, 1000) # vector for prize of strategy 1"
"0","strategy2 = rep(NA, 1000) # vector for prize of strategy 2"
"0","same_result = rep(NA, 1000)"
"0",""
"0","# simulation"
"0","for (i in seq_along(strategy1)) {"
"0","  a <- game(N = 4)"
"0","  strategy1[i] <- a[1]"
"0","  strategy2[i] <- a[2]"
"0","  "
"0","  same_result[i] <- ifelse(((strategy1[i] == ""goat"")&(strategy2[i] == ""goat"")), 1, 0) # If both results are goats, assign 1 to the list ""same_result"""
"0","}"
"0",""
"0","# The probability that both strategies result in a goat."
"0","mean(same_result) "
"1","[1]"
"1"," 0.372"
"1","
"
