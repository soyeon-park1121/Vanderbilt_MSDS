ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV", type = "l")
# Positive Predictive value, P(D+|T+)
# P(D+|T+) = P(D+&T+) / P(T+)
# simulation setting
prevalence <- seq(0, 10, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
# simulation
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV", type = "l")
# Positive Predictive value, P(D+|T+)
# P(D+|T+) = P(D+&T+) / P(T+)
# simulation setting
prevalence <- seq(0, 1, length = 50)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
# simulation
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV", type = "l")
# Positive Predictive value, P(D+|T+)
# P(D+|T+) = P(D+&T+) / P(T+)
# simulation setting
prevalence <- seq(0, 1, length = 100)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
# simulation
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence", ylab = "PPV", type = "l")
# Positive Predictive value, P(D+|T+)
# P(D+|T+) = P(D+&T+) / P(T+)
# simulation setting
prevalence <- seq(0, 1, length = 100)
ppv <- NA
test_positive <- NA
joint_test_positive_status_positive <- NA
# simulation
for (i in 1:length(prevalence)) {
test_positive[i] <- (prevalence[i] * 0.85) + (1 - prevalence[i]) - (1 - prevalence[i])*(0.95) # P(T-|D-) = .95
joint_test_positive_status_positive[i] <- prevalence[i] * 0.85 # P(T+|D+) = .85
ppv[i] = joint_test_positive_status_positive[i] / test_positive[i]
}
plot(prevalence, ppv, xlab = "Prevalence, P(D+)", ylab = "PPV", type = "l")
require(magrittr)
require(dplyr)
game <- function(N){
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
guess <- sample(1:N,1)
game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
# simulation setting
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
same_result = rep(NA, 1000)
# simulation
for (i in seq_along(strategy1)) {
strategy1[i] <- game(N = 4)[1]
strategy2[i] <- game(N = 4)[2]
same_result[i] <- ifelse(((strategy1[i] == "goat")&(strategy2[i] == "goat")), 1, 0) # If both results are goats, assign 1 to the list "same_result"
}
# The probability that both strategies result in a goat.
mean(same_result)
require(magrittr)
require(dplyr)
game <- function(N){
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
guess <- sample(1:N,1)
game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
# simulation setting
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
same_result = rep(NA, 1000)
# simulation
for (i in seq_along(strategy1)) {
strategy1[i] <- game(N = 4)[1]
strategy2[i] <- game(N = 4)[2]
same_result[i] <- ifelse(((strategy1[i] == "goat")&(strategy2[i] == "goat")), 1, 0) # If both results are goats, assign 1 to the list "same_result"
}
# The probability that both strategies result in a goat.
mean(same_result)
# simulation setting
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
car_result = rep(NA, 1000)
# simulation 1000 times
for (i in seq_along(strategy1)) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
quantile(car_result, c(0.005, 0.995))
quantile(car_result, c(0.005, 0.995))
quantile(car_result, c(0.005, 0.995))
quantile(car_result, c(0.005, 0.995))
quantile(car_result, c(0.005, 0.995))
for (j in 1:100) {
strategy1 = NA # vector for prize of strategy 1
strategy2 = NA # vector for prize of strategy 2
car_result = NA
for (i in 1:1000) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
mean_list[j] <- mean(car_result)
}
mean_list = NA
for (j in 1:100) {
strategy1 = NA # vector for prize of strategy 1
strategy2 = NA # vector for prize of strategy 2
car_result = NA
for (i in 1:1000) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
mean_list[j] <- mean(car_result)
}
mean_list = NA
for (j in 1:100) {
strategy1 = NA # vector for prize of strategy 1
strategy2 = NA # vector for prize of strategy 2
car_result = NA
for (i in 1:100) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
mean_list[j] <- mean(car_result)
}
mean_list = NA
strategy1 = NA # vector for prize of strategy 1
strategy2 = NA # vector for prize of strategy 2
car_result = NA
for (j in 1:10) {
for (i in 1:100) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
mean_list[j] <- mean(car_result)
}
quantile(mean_list, c(0.005, 0.995))
# simulation setting
strategy1 = rep(NA, 100) # vector for prize of strategy 1
strategy2 = rep(NA, 100) # vector for prize of strategy 2
car_result = rep(NA, 100)
# simulation 1000 times
for (i in seq_along(strategy1)) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
mean_list = NA
strategy1 = NA # vector for prize of strategy 1
strategy2 = NA # vector for prize of strategy 2
car_result = NA
for (j in 1:100) {
for (i in 1:100) {
strategy1[i] <- ifelse(game(N = 4)[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(game(N = 4)[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
mean_list[j] <- mean(car_result)
}
quantile(mean_list, c(0.005, 0.995))
# Simulation setting
n = 5000
quantile.25 = NA
quantile.50 = NA
quantile.75 = NA
for(i in 1:n) {
sample <- exp(rnorm(101, mean = 0, sd = 1))
quantile.25[i] <- quantile(sample, 0.25)
quantile.50[i] <- quantile(sample, 0.50)
quantile.75[i] <- quantile(sample, 0.75)
}
# Calculate 95% CI for 25th, 50th, 75th quantiles of sampling distribution
ci.25 <- quantile(quantile.25, c(0.025, 0.975))
ci.50 <- quantile(quantile.50, c(0.025, 0.975))
ci.75 <- quantile(quantile.75, c(0.025, 0.975))
# Calculate the length of each 95% CI
tight.25 <- ci.25[2] - ci.25[1]
tight.50 <- ci.50[2] - ci.50[1]
tight.75 <- ci.75[2] - ci.75[1]
tight.25
tight.50
tight.75
# Which has the tightest 95% CI?
min(tight.25, tight.50, tight.75)
# Draw density plots
par(mfrow = c(1,3))
plot(density(quantile.25))
plot(density(quantile.50))
plot(density(quantile.75))
# 25th quantiles of the sampling distribution has the tightest 95% CI.
# Simulation setting
n = 5000
quantile.25 = NA
quantile.50 = NA
quantile.75 = NA
for(i in 1:n) {
sample <- exp(rnorm(101, mean = 0, sd = 1))
quantile.25[i] <- quantile(sample, 0.25)
quantile.50[i] <- quantile(sample, 0.50)
quantile.75[i] <- quantile(sample, 0.75)
}
# Calculate 95% CI for 25th, 50th, 75th quantiles of sampling distribution
ci.25 <- quantile(quantile.25, c(0.025, 0.975))
ci.50 <- quantile(quantile.50, c(0.025, 0.975))
ci.75 <- quantile(quantile.75, c(0.025, 0.975))
# Calculate the length of each 95% CI
tight.25 <- ci.25[2] - ci.25[1]
tight.50 <- ci.50[2] - ci.50[1]
tight.75 <- ci.75[2] - ci.75[1]
tight.25
tight.50
tight.75
# Which has the tightest 95% CI?
min(tight.25, tight.50, tight.75)
# Draw density plots
par(mfrow = c(1,3))
plot(density(quantile.25), main = "25th quantile")
plot(density(quantile.50))
plot(density(quantile.75))
# 25th quantiles of the sampling distribution has the tightest 95% CI.
# Simulation setting
n = 5000
quantile.25 = NA
quantile.50 = NA
quantile.75 = NA
for(i in 1:n) {
sample <- exp(rnorm(101, mean = 0, sd = 1))
quantile.25[i] <- quantile(sample, 0.25)
quantile.50[i] <- quantile(sample, 0.50)
quantile.75[i] <- quantile(sample, 0.75)
}
# Calculate 95% CI for 25th, 50th, 75th quantiles of sampling distribution
ci.25 <- quantile(quantile.25, c(0.025, 0.975))
ci.50 <- quantile(quantile.50, c(0.025, 0.975))
ci.75 <- quantile(quantile.75, c(0.025, 0.975))
# Calculate the length of each 95% CI
tight.25 <- ci.25[2] - ci.25[1]
tight.50 <- ci.50[2] - ci.50[1]
tight.75 <- ci.75[2] - ci.75[1]
tight.25
tight.50
tight.75
# Which has the tightest 95% CI?
min(tight.25, tight.50, tight.75)
# Draw density plots
par(mfrow = c(1,3))
plot(density(quantile.25), main = "25th quantile")
plot(density(quantile.50), main = "50th quantile")
plot(density(quantile.75), main = "75th quantile")
# 25th quantiles of the sampling distribution has the tightest 95% CI.
# Simulation setting
n = 5000
quantile.25 = NA
quantile.50 = NA
quantile.75 = NA
for(i in 1:n) {
sample <- exp(rnorm(101, mean = 0, sd = 1))
quantile.25[i] <- quantile(sample, 0.25)
quantile.50[i] <- quantile(sample, 0.50)
quantile.75[i] <- quantile(sample, 0.75)
}
# Calculate 95% CI for 25th, 50th, 75th quantiles of sampling distribution
ci.25 <- quantile(quantile.25, c(0.025, 0.975))
ci.50 <- quantile(quantile.50, c(0.025, 0.975))
ci.75 <- quantile(quantile.75, c(0.025, 0.975))
# Calculate the length of each 95% CI
tight.25 <- ci.25[2] - ci.25[1]
tight.50 <- ci.50[2] - ci.50[1]
tight.75 <- ci.75[2] - ci.75[1]
tight.25
tight.50
tight.75
# Which has the tightest 95% CI?
min(tight.25, tight.50, tight.75)
# Draw density plots
par(mfrow = c(1,3))
plot(density(quantile.25), main = "25th quantile", xlab = "x")
plot(density(quantile.50), main = "50th quantile", xlab = "x")
plot(density(quantile.75), main = "75th quantile", xlab = "x")
# 25th quantiles of the sampling distribution has the tightest 95% CI.
require(magrittr)
require(dplyr)
game <- function(N){
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
guess <- sample(1:N,1)
game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
# simulation setting
a = NA
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
same_result = rep(NA, 1000)
# simulation
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- a[1]
strategy2[i] <- a[2]
same_result[i] <- ifelse(((strategy1[i] == "goat")&(strategy2[i] == "goat")), 1, 0) # If both results are goats, assign 1 to the list "same_result"
}
# The probability that both strategies result in a goat.
mean(same_result)
# simulation setting
strategy1 = rep(NA, 100) # vector for prize of strategy 1
strategy2 = rep(NA, 100) # vector for prize of strategy 2
car_result = rep(NA, 100)
a = NA
# simulation 1000 times
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- ifelse(a[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(a[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
# simulation setting
strategy1 = rep(NA, 100) # vector for prize of strategy 1
strategy2 = rep(NA, 100) # vector for prize of strategy 2
car_result = rep(NA, 100)
a = NA
# simulation 1000 times
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- ifelse(a[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(a[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
# simulation setting
strategy1 = rep(NA, 100) # vector for prize of strategy 1
strategy2 = rep(NA, 100) # vector for prize of strategy 2
car_result = rep(NA, 100)
a = NA
# simulation 1000 times
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- ifelse(a[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(a[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
# simulation setting
strategy1 = rep(NA, 100) # vector for prize of strategy 1
strategy2 = rep(NA, 100) # vector for prize of strategy 2
car_result = rep(NA, 100)
a = NA
# simulation 1000 times
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- ifelse(a[1] == "car", 1, 0) # If the result of strategy 1 is car, assign 1 to the list "strategy1"
strategy2[i] <- ifelse(a[2] == "car", 1, 0) # If the result of strategy 2 is car, assign 1 to the list "strategy2"
car_result[i] <- ifelse((strategy1[i] + strategy2[i] >= 1),1,0) # If there is at least one car, the value of car_result is same or greater than 1
}
# The probability that both strategies result in a goat.
mean(car_result)
require(magrittr)
require(dplyr)
game <- function(N){
if(N<3) stop("Must have at least 3 doors")
prize <- sample(c(rep("goat",N-1),"car"), N)
guess <- sample(1:N,1)
game <- data.frame(door = 1:N, prize = prize, stringsAsFactors = FALSE) %>%
mutate(first_guess = case_when(
door == guess ~ 1
, TRUE ~ 0
)) %>%
mutate(potential_reveal = case_when(
first_guess == 1 ~ 0
, prize == "car" ~ 0
, TRUE ~ 1
)) %>%
mutate(reveal = 1*(rank(potential_reveal, ties.method = "random") == 3)) %>%
mutate(potential_switch = case_when(
first_guess == 1 ~ 0
, reveal == 1 ~ 0
, TRUE ~ 1
)) %>%
mutate(switch = 1*(rank(potential_switch, ties.method = "random") == 3))
c(game$prize[game$first_guess == 1], game$prize[game$switch == 1])
}
# simulation setting
a = NA
strategy1 = rep(NA, 1000) # vector for prize of strategy 1
strategy2 = rep(NA, 1000) # vector for prize of strategy 2
same_result = rep(NA, 1000)
# simulation
for (i in seq_along(strategy1)) {
a <- game(N = 4)
strategy1[i] <- a[1]
strategy2[i] <- a[2]
same_result[i] <- ifelse(((strategy1[i] == "goat")&(strategy2[i] == "goat")), 1, 0) # If both results are goats, assign 1 to the list "same_result"
}
# The probability that both strategies result in a goat.
mean(same_result)
# Make a subset for adult's Scr
adult.scr <- d1 %>% filter(age > 18) %>%
filter(!is.na(SCr)) %>% `[[`("SCr")
N.adult.scr <- length(adult.scr)
# Kernel density method
epdfstar <- function(t, data, smooth) {
outer(t, data, function(a,b){dnorm(a,b,smooth)}) %>% rowMeans
}
# Create a density plot
curve(epdfstar(x, adult.scr, smooth = 1), lwd = 3, xlim = c(-5,5), ylab = "Density", xlab = "Adult's Creatinine(SCr)")
plot(density(adult.scr))
# Make a subset for adult's Scr
adult.scr <- d1 %>% filter(age > 18) %>%
filter(!is.na(SCr)) %>% `[[`("SCr")
N.adult.scr <- length(adult.scr)
# Kernel density method
epdfstar <- function(t, data, smooth) {
outer(t, data, function(a,b){dnorm(a,b,smooth)}) %>% rowMeans
}
# Create a density plot
curve(epdfstar(x, adult.scr, smooth = 1), lwd = 3, xlim = c(-5,5), ylab = "Density", xlab = "Adult's Creatinine(SCr)")
plot(density(adult.scr))
hist(adult.scr)
# Make a subset for adult's Scr
adult.scr <- d1 %>% filter(age > 18) %>%
filter(!is.na(SCr)) %>% `[[`("SCr")
N.adult.scr <- length(adult.scr)
# Kernel density method
epdfstar <- function(t, data, smooth) {
outer(t, data, function(a,b){dnorm(a,b,smooth)}) %>% rowMeans
}
# Create a density plot
curve(epdfstar(x, adult.scr, smooth = 1), lwd = 3, xlim = c(-5,5), ylab = "Density", xlab = "Adult's Creatinine(SCr)")
plot(density(adult.scr))
hist(adult.scr, breaks = 100)
