split(.$p) %>%
lwith({
lines(log(ss, base = 2), mae, type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Absolute Error")
title(ylab = "MAE")
title(xlab = "Sample Size", line = 1.5)
require(magrittr)
package(dplyr)
# MAE Plots
require(tgsify)
require(data.table)
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(mae ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), mae, type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Absolute Error")
title(ylab = "MAE")
title(xlab = "Sample Size", line = 1.5)
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(mre ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), mre, type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Relative Error")
title(ylab = "MRE")
title(xlab = "Sample Size", line = 1.5)
# MAE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mae, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mae, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Absolute Error")
title(ylab = "MAE")
title(xlab = "Sample Size", line = 1.5)
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(mre ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), mre, type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Relative Error")
title(ylab = "MRE")
title(xlab = "Sample Size", line = 1.5)
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Relative Error")
title(ylab = "MRE")
title(xlab = "Sample Size", line = 1.5)
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Relative Error")
title(ylab = "MRE")
title(xlab = "Sample Size (log2 scale)", line = 1.5)
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Relative Error")
title(ylab = "MRE")
title(xlab = "Sample Size (log10 scale)", line = 1.5)
# MAE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mae, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mae, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
box()
axis(side = 1, at = axTicks(1), labels = 2^axTicks(1))
axis(2)
title(main = "Mean Absolute Error")
title(ylab = "MAE")
title(xlab = "Sample Size (log10 scale)", line = 1.5)
require(magrittr)
# Parameters
# Sample Size = 2^(2:15)
# Underlying true probability = c(0.01, 0.05, 0.1, 0.25, 0.5)
# Parameters will be a list
parameters <- list(ss = 4, p = .1, R = 5000)
# Process
# Generating binomial random variables(RV) of a specific sample size and specific probability.
create_data_estimate_p <- function(parameters) {
parameters$phat <- rbinom(parameters$R, parameters$ss, parameters$p) / parameters$ss
parameters
}
# Property
absolute_error <- function(parameters) {
abs(parameters$phat - parameters$p)
}
# Absolute error |p_hat - p|
# Relative error |p_hat - p| / p
# Repeat
# Distributions
one_p_n <- function(parameters){
ae <- parameters %>% create_data_estimate_p %>% absolute_error
re <- ae / parameters$p
mae <- mean(ae)
mre <- mean(re)
c(mae, mre)
}
simulation_settings <- expand.grid(
R = 5000,
p = c(0.01, 0.05, 0.1, 0.25, 0.5),
ss = 2^(2:15),
mae = NA_real_,
mre = NA_real_,
KEEP.OUT.ATTRS = FALSE
)
for(i in 1:nrow(simulation_settings)) {
simulation_settings[i, c("mae", "mre")] <- simulation_settings[i, ] %>% as.list %>% one_p_n
}
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 10), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 10)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 10), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
require(magrittr)
# Parameters
# Sample Size = 2^(2:15)
# Underlying true probability = c(0.01, 0.05, 0.1, 0.25, 0.5)
# Parameters will be a list
parameters <- list(ss = 4, p = .1, R = 5000)
# Process
# Generating binomial random variables(RV) of a specific sample size and specific probability.
create_data_estimate_p <- function(parameters) {
parameters$phat <- rbinom(parameters$R, parameters$ss, parameters$p) / parameters$ss
parameters
}
# Property
absolute_error <- function(parameters) {
abs(parameters$phat - parameters$p)
}
# Absolute error |p_hat - p|
# Relative error |p_hat - p| / p
# Repeat
# Distributions
one_p_n <- function(parameters){
ae <- parameters %>% create_data_estimate_p %>% absolute_error
re <- ae / parameters$p
mae <- mean(ae)
mre <- mean(re)
c(mae, mre)
}
simulation_settings <- expand.grid(
R = 5000,
p = c(0.01, 0.05, 0.1, 0.25, 0.5),
ss = 2^(2:15),
mae = NA_real_,
mre = NA_real_,
KEEP.OUT.ATTRS = FALSE
)
for(i in 1:nrow(simulation_settings)) {
simulation_settings[i, c("mae", "mre")] <- simulation_settings[i, ] %>% as.list %>% one_p_n
}
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 10)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 10), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
require(magrittr)
library(tidyverse)
# Parameters
# Sample Size = 2^(2:15)
# Underlying true probability = c(0.01, 0.05, 0.1, 0.25, 0.5)
# Parameters will be a list
parameters <- list(ss = 4, p = .1, R = 5000)
# Process
# Generating binomial random variables(RV) of a specific sample size and specific probability.
create_data_estimate_p <- function(parameters) {
parameters$phat <- rbinom(parameters$R, parameters$ss, parameters$p) / parameters$ss
parameters
}
# Property
absolute_error <- function(parameters) {
abs(parameters$phat - parameters$p)
}
# Absolute error |p_hat - p|
# Relative error |p_hat - p| / p
# Repeat
# Distributions
one_p_n <- function(parameters){
ae <- parameters %>% create_data_estimate_p %>% absolute_error
re <- ae / parameters$p
mae <- mean(ae)
mre <- mean(re)
c(mae, mre)
}
simulation_settings <- expand.grid(
R = 5000,
p = c(0.01, 0.05, 0.1, 0.25, 0.5),
ss = 2^(2:15),
mae = NA_real_,
mre = NA_real_,
KEEP.OUT.ATTRS = FALSE
)
for(i in 1:nrow(simulation_settings)) {
simulation_settings[i, c("mae", "mre")] <- simulation_settings[i, ] %>% as.list %>% one_p_n
}
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
require(magrittr)
# Parameters
# Sample Size = 2^(2:15)
# Underlying true probability = c(0.01, 0.05, 0.1, 0.25, 0.5)
# Parameters will be a list
parameters <- list(ss = 4, p = .1, R = 5000)
# Process
# Generating binomial random variables(RV) of a specific sample size and specific probability.
create_data_estimate_p <- function(parameters) {
parameters$phat <- rbinom(parameters$R, parameters$ss, parameters$p) / parameters$ss
parameters
}
# Property
absolute_error <- function(parameters) {
abs(parameters$phat - parameters$p)
}
# Absolute error |p_hat - p|
# Relative error |p_hat - p| / p
# Repeat
# Distributions
one_p_n <- function(parameters){
ae <- parameters %>% create_data_estimate_p %>% absolute_error
re <- ae / parameters$p
mae <- mean(ae)
mre <- mean(re)
c(mae, mre)
}
simulation_settings <- expand.grid(
R = 5000,
p = c(0.01, 0.05, 0.1, 0.25, 0.5),
ss = 2^(2:15),
mae = NA_real_,
mre = NA_real_,
KEEP.OUT.ATTRS = FALSE
)
for(i in 1:nrow(simulation_settings)) {
simulation_settings[i, c("mae", "mre")] <- simulation_settings[i, ] %>% as.list %>% one_p_n
}
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mre, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mre, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
# MRE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(mre ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), mre, type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind",.) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[, 2], lwd = 4, bty = "n")
})
# MAE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mae, base = 10) ~ ss) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mae, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
# MAE Plots
simulation_settings %>%
mutate(col = factor(p) %>% as.numeric) %>%
plotstyle(upright, mar = c(3, 3, 2, 1)) %>%
plot_setup(log(mae, base = 10) ~ log(ss, base = 2)) %>%
split(.$p) %>%
lwith({
lines(log(ss, base = 2), log(mae, base = 10), type = "b", col = col[1], lwd = 4)
c(p[1], col[1])
}) %>%
do.call("rbind", .) %>%
(function(x) {
legend("topright", legend = "p = " %|% x[, 1], col = x[ ,2], lwd = 4, bty = "n")
})
require(magrittr)
library(tidyverse)
library(dplyr)
# Parameters
# Sample Size = 2^(2:15)
# Underlying true probability = c(0.01, 0.05, 0.1, 0.25, 0.5)
# Parameters will be a list
parameters <- list(ss = 4, p = .1, R = 5000)
# Process
# Generating binomial random variables(RV) of a specific sample size and specific probability.
create_data_estimate_p <- function(parameters) {
parameters$phat <- rbinom(parameters$R, parameters$ss, parameters$p) / parameters$ss
parameters
}
# Property
absolute_error <- function(parameters) {
abs(parameters$phat - parameters$p)
}
# Absolute error |p_hat - p|
# Relative error |p_hat - p| / p
# Repeat
# Distributions
one_p_n <- function(parameters){
ae <- parameters %>% create_data_estimate_p %>% absolute_error
re <- ae / parameters$p
mae <- mean(ae)
mre <- mean(re)
c(mae, mre)
}
simulation_settings <- expand.grid(
R = 5000,
p = c(0.01, 0.05, 0.1, 0.25, 0.5),
ss = 2^(2:15),
mae = NA_real_,
mre = NA_real_,
KEEP.OUT.ATTRS = FALSE
)
for(i in 1:nrow(simulation_settings)) {
simulation_settings[i, c("mae", "mre")] <- simulation_settings[i, ] %>% as.list %>% one_p_n
}
